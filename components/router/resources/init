#! /bin/bash -xe

# Wait for all interfaces to get added.
# By default only check for WAN and AUX interfaces
# Any other interface needs to be passed via ENV to be checked.
# Mandatory checks

# Isolate docker network
if [ "$LEGACY" == "no" ]; then
    isolate_docker_iface
fi

while ! find /sys/class/net | grep -q -w eth1 ; do
    echo "WAN interface not found"
    sleep 5
done
ip link set eth1 up

while ! find /sys/class/net | grep -q -w aux0 ; do
    echo "WAN interface not found"
    sleep 5
done
ip link set aux0 up

# Zebra Configuration template
ZEBRA_CONF=$(cat <<EOF
!
! Interface #IFACE
!
interface #IFACE
 no ipv6 nd suppress-ra
 ipv6 nd router-preference high
 no ipv6 nd managed-config-flag
 no ipv6 nd other-config-flag
!
EOF
)

# PIMD configuration template
PIMD_CONF=$(cat <<EOF
interface #IFACE
 ip pim ssm
 ip igmp
!
EOF
)

# RIPD configuratio template
RIPD_CONF=$(cat <<EOF
interface #IFACE
    ip rip authentication mode md5
    ip rip authentication key-chain mykey1
!
EOF
)
RIPD_STUB="! RIP network"

CPE_DATA="$CPE_DATA_IFACE $CPE_DATA_BUNDLE"
CPE_MGMT="$CPE_MGMT_IFACE $CPE_MGMT_BUNDLE"
CPE_VOICE="$CPE_VOICE_IFACE $CPE_VOICE_BUNDLE"

IFACE_REQUIRED=("$CPE_DATA")

if [ "$TRIPLE_PLAY" == "yes" ]; then
    IFACE_REQUIRED+=("$CPE_MGMT" "$CPE_VOICE")
fi

for IFACE_DATA in "${IFACE_REQUIRED[@]}"; do
    read -r IFACE BUNDLE <<< "$IFACE_DATA"
    echo "checked: $IFACE, status:exists"
    echo ""

    if [ "$FRR_AUTO_CONF" == "yes" ]; then
        ZEBRA_BLOB="${ZEBRA_CONF//\#IFACE/$IFACE}"
        for IP_GROUP in $(echo "$BUNDLE"| tr ";" "\n"); do
            read -r IPv4 IPv6 <<< "$(echo "$IP_GROUP"| tr ',' ' ')"
            if [ -n "$IPv4" ]; then
                ZEBRA_BLOB=$(cat <<< "$ZEBRA_BLOB"$'\n'" ip address $IPv4")
            fi
            if [ -n "$IPv6" ]; then
                ZEBRA_BLOB=$(cat <<< "$ZEBRA_BLOB"$'\n'" ipv6 address $IPv6")
            fi
        done

        {
            cat <<< "$ZEBRA_BLOB"
            echo "${PIMD_CONF//\#IFACE/$IFACE}"
            echo "${RIPD_CONF//\#IFACE/$IFACE}"
        } >> /etc/frr/frr.conf

        sed -i "s|$RIPD_STUB|  network $IFACE\n$RIPD_STUB|" /etc/frr/frr.conf

    fi
done

sysctl -p /etc/sysctl.conf || true

echo "Starting daemons."
for svc in $FRR_DAEMONS; do
    echo "Starting ${svc}."
    sed -i s"/${svc}=no/${svc}=yes/" /etc/frr/daemons
done

# New changes in FRR 9.0+
if [ -f /etc/frr/staticd.conf ]; then
    cat /etc/frr/staticd.conf >> /etc/frr/frr.conf
    sed -i s"/staticd=no/staticd=yes/" /etc/frr/daemons
fi

service frr start

# Modify SMCroute to redirect at $MCAST_TARGET iface
if [ -f /etc/smcroute.conf ]; then
    service smcroute start
fi

sleep 5

update-alternatives --set iptables /usr/sbin/iptables-legacy
update-alternatives --set ip6tables /usr/sbin/ip6tables-nft

if [ -n "$ENABLE_NAT_ON" ]; then
    iptables -t nat -A POSTROUTING -o "$ENABLE_NAT_ON" -j MASQUERADE
    ip6tables -t nat -A POSTROUTING -o "$ENABLE_NAT_ON" -j MASQUERADE
fi

for IFACE_DATA in "${IFACE_REQUIRED[@]}"; do
    read -r IFACE BUNDLE <<< "$IFACE_DATA"
    if [ -n "$DHCP_RELAY" ]; then
        read -r UPSTREAM RELAY4 RELAY6 <<< "$(echo "$DHCP_RELAY"| tr ',' ' ')"
        dhcrelay -4 -iu "$UPSTREAM" -id "$IFACE" "$RELAY4" || true
        dhcrelay -6 -l "$IFACE" -u "$RELAY6"%"$UPSTREAM" || true
    fi
done

# Run sshd by default
/usr/sbin/sshd -D
